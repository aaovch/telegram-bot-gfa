import logging
import json
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import asyncio
import random
from datetime import time, timezone, timedelta
from telegram.error import TelegramError
from telegram import Update
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ ID —á–∞—Ç–∞
TOKEN = os.getenv('TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
    
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
MENTION_MESSAGES_FILE = 'mention_messages.json'
STATE_FILE = 'state.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
try:
    with open(MENTION_MESSAGES_FILE, 'r') as file:
        MENTION_MESSAGES = json.load(file)
except FileNotFoundError:
    MENTION_MESSAGES = [
        "–°–µ–≥–æ–¥–Ω—è –æ–±—Å—É–∂–¥–∞–µ–º {name}! üíè –ö–∞–∂–µ—Ç—Å—è —á—Ç–æ –µ–≥–æ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–º–µ—Ç–∏–ª–∏ —Å –¥–µ–≤—É—à–∫–æ–π! –û–Ω –Ω–∞—Ä—É—à–∞–µ—Ç –∑–∞–∫–æ–Ω—ã –≥–æ–º–µ—Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–ø–æ–ª—å—è! –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ –∏ —É–¥–µ—Ä–∂–∞—Ç—å –æ—Ç –ø–∞–¥–µ–Ω–∏—è –≤ –ø—Ä–æ–ø–∞—Å—Ç—å –≥–µ—Ç–µ—Ä–æ—Å–µ–∫—Å—É–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π!",
    ]

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
participants = {}
shuffled_messages = []
last_chosen_member_id = None

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
def load_state():
    global participants, shuffled_messages, last_chosen_member_id
    try:
        with open(STATE_FILE, 'r') as file:
            state = json.load(file)
            participants = state.get("participants", {})
            shuffled_messages = state.get("shuffled_messages", [])
            last_chosen_member_id = state.get("last_chosen_member_id", None)
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª
def save_state():
    state = {
        "participants": participants,
        "shuffled_messages": shuffled_messages,
        "last_chosen_member_id": last_chosen_member_id
    }
    with open(STATE_FILE, 'w') as file:
        json.dump(state, file)
    logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def get_next_message():
    global shuffled_messages

    # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ç–∞—Å–æ–≤—ã–≤–∞–µ–º
    if not shuffled_messages:
        shuffled_messages = MENTION_MESSAGES[:]
        random.shuffle(shuffled_messages)

    # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = shuffled_messages.pop()
    save_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return message

async def track_participants(update: Update, context):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è."""
    if update.message and update.message.from_user:
        user = update.message.from_user
        if user.id not in participants:
            participants[user.id] = user.mention_html()
            save_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫: {user.full_name} ({user.id})")
    else:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

async def send_daily_message(context):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞."""
    global last_chosen_member_id
    try:
        logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        members = [{"id": user_id, "mention_html": mention_html} for user_id, mention_html in participants.items()]

        if members:
            # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            available_members = [member for member in members if member["id"] != last_chosen_member_id]

            if not available_members:
                available_members = members  # –ï—Å–ª–∏ –≤—Å–µ —É–∂–µ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

            chosen_member = random.choice(available_members)
            last_chosen_member_id = chosen_member["id"]  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            save_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = get_next_message().format(name=chosen_member["mention_html"])
            await context.bot.send_message(
                chat_id=CHAT_ID,
                text=message,
                parse_mode='HTML'
            )
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def remind(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /remind –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é."""
    global last_chosen_member_id
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /remind")
    try:
        members = [{"id": user_id, "mention_html": mention_html} for user_id, mention_html in participants.items()]

        if members:
            # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            available_members = [member for member in members if member["id"] != last_chosen_member_id]

            if not available_members:
                available_members = members  # –ï—Å–ª–∏ –≤—Å–µ —É–∂–µ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

            chosen_member = random.choice(available_members)
            last_chosen_member_id = chosen_member["id"]  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            save_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = get_next_message().format(name=chosen_member["mention_html"])
            await context.bot.send_message(
                chat_id=CHAT_ID,
                text=message,
                parse_mode='HTML'
            )
            await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /remind.")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.")
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /remind: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

async def start(update: Update, context):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    await update.message.reply_text('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –Ø –±—É–¥—É —Å–æ–±–∏—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —É–ø–æ–º–∏–Ω–∞—Ç—å –∏—Ö.')

async def get_chat_id(update, context):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /chatid"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /chatid")
    await update.message.reply_text(f"Chat ID: {update.message.chat_id}")

async def list_participants(update: Update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /participants –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    if participants:
        participants_list = "\n".join([f"{mention_html}" for mention_html in participants.values()])
        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{participants_list}", parse_mode='HTML')
    else:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç.")

async def add_message(update: Update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /addmessage –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ MENTION_MESSAGES."""
    if context.args:
        new_message = " ".join(context.args)
        MENTION_MESSAGES.append(new_message)
        with open(MENTION_MESSAGES_FILE, 'w') as file:
            json.dump(MENTION_MESSAGES, file)
        await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {new_message}")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /addmessage.")

async def remove_message(update: Update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /removemessage –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ MENTION_MESSAGES –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
    if context.args and context.args[0].isdigit():
        index = int(context.args[0])
        if 0 <= index < len(MENTION_MESSAGES):
            removed_message = MENTION_MESSAGES.pop(index)
            with open(MENTION_MESSAGES_FILE, 'w') as file:
                json.dump(MENTION_MESSAGES, file)
            await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {removed_message}")
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {removed_message}")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /removemessage.")

async def list_messages(update: Update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /listmessages –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ MENTION_MESSAGES."""
    if MENTION_MESSAGES:
        messages_list = "\n".join([f"{idx}: {msg}" for idx, msg in enumerate(MENTION_MESSAGES)])
        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π:\n{messages_list}")
    else:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç.")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    load_state()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ JobQueue –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    job_queue = application.job_queue
    if job_queue is None:
        raise RuntimeError("JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PTB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JobQueue.")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    local_tz = timezone(timedelta(hours=6))  # –ê—Å—Ç–∞–Ω–∞ (UTC+6)
    job_time = time(10, 0, 0, tzinfo=local_tz)
    job_queue.run_daily(
        send_daily_message,
        time=job_time,
        days=(0, 1, 2, 3, 4, 5, 6)  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("chatid", get_chat_id))
    application.add_handler(CommandHandler("remind", remind))
    application.add_handler(CommandHandler("participants", list_participants))
    application.add_handler(CommandHandler("addmessage", add_message))
    application.add_handler(CommandHandler("removemessage", remove_message))
    application.add_handler(CommandHandler("listmessages", list_messages))

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    application.add_handler(MessageHandler(filters.ALL, track_participants))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()


if __name__ == '__main__':
    import nest_asyncio

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö event loops
    nest_asyncio.apply()

    # –ó–∞–ø—É—Å–∫–∞–µ–º main –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º loop
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
