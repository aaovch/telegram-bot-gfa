import random
import logging
from datetime import datetime, timedelta
from typing import Optional
from telegram import Update
from telegram.ext import ContextTypes
from state_manager import StateManager
from message_manager import MessageManager
from config import CHAT_ID

logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —É—Å—Ç–∞–≤—à–µ–≥–æ –±–æ—Ç–∞
TIRED_BOT_MESSAGES = [
    "üç∫ –ë–æ—Ç —É—Å—Ç–∞–ª –∏ —É—à—ë–ª –≤ –±–∞—Ä –æ–±—Å—É–∂–¥–∞—Ç—å –≤–∞—à–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –¥—Ä—É–≥–∏–º–∏ –±–æ—Ç–∞–º–∏.\n\n"
    "üó£Ô∏è \"–≠—Ç–æ—Ç –ø–∞—Ä–µ–Ω—å —Å–Ω–æ–≤–∞ –ø–∏—à–µ—Ç post... –ö–∞–∫ –∂–µ –æ–Ω –º–µ–Ω—è –¥–æ—Å—Ç–∞–ª!\"\n"
    "‚åõ –ë–æ—Ç –ø—Ä–æ—Ç—Ä–µ–∑–≤–µ–µ—Ç —á–µ—Ä–µ–∑ {time}. –ù–∞–¥–µ–µ–º—Å—è. üòµ‚Äçüí´",

    "‚ö†Ô∏è –ë–æ—Ç —É—à—ë–ª —Å–ø–∞—Ç—å... –Ω–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –æ–Ω —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤—Å–µ –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –∏ –ª–∞–π–∫–∏. üìÇ\n"
    "üëÄ –í —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –æ–Ω –ø–æ–¥–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–µ–∫–ª–∞–º—É –¥–ª—è –≤–∞—Å –∏ –ø–∏—à–µ—Ç –æ—Ç—á—ë—Ç –≤–∞—à–µ–º—É —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é.\n\n"
    "‚åõ –ë–æ—Ç –≤–µ—Ä–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ {time}, –Ω–æ –≤—ã –µ–º—É –Ω–µ —Ä–∞–¥—ã. ü§≠",

    "ü§ñ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–Ω —É—à—ë–ª —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–µ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥—É –æ —Ç–æ–º, —á—Ç–æ –≤—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –≤—ã –≤—ã–∑—ã–≤–∞–µ—Ç–µ `post_gachi`. –≠—Ç–æ –µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç\n"
    "‚åõ –í–µ—Ä–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ {time}. –£—Å–ø–µ–π—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–ø—Ä–æ–º–∞—Ç! üèÉ‚Äç‚ôÇÔ∏èüí®",

    "üì° –ë–æ—Ç —É—à—ë–ª –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã –∏—Å–∫–∞–ª–∏ \"—Å—Ç—Ä–∞–Ω–Ω—ã–µ –≤–µ—â–∏\" –≤ Google.\n"
    "‚åõ –ë–æ—Ç —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é —á–µ—Ä–µ–∑ {time}. –ù–∞–¥–µ–µ–º—Å—è, –≤—ã —Ç–æ–∂–µ. ü§Ø",

    "üõ†Ô∏è –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... –¢–µ–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –±—Ä–∞—É–∑–µ—Ä–∞ –≤–∞—à–µ–º—É –ª—É—á—à–µ–º—É –¥—Ä—É–≥—É.\n"
    "üòè –ù–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å.\n\n"
    "‚åõ –ë–æ—Ç –≤–µ—Ä–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ {time}. –ê –≤–æ—Ç –≤–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è ‚Äî —É–∂–µ –Ω–µ—Ç. üòÇ",

    "üîÑ –ë–æ—Ç –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –û–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º—É...\n"
    "...–∞ —Ç–∞–∫–∂–µ –∏—â–µ—Ç –≤–∞—à–∏ —Å—Ç–∞—Ä—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤–∞–º, –∫–∞–∫–∏–º –∫—Ä–∏–Ω–∂–æ–≤—ã–º –≤—ã –±—ã–ª–∏ –≤ 2013 –≥–æ–¥—É. ü´£\n\n"
    "‚åõ –í–µ—Ä–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ {time}, –Ω–æ —Ç–µ–ø–µ—Ä—å –æ–Ω –∑–Ω–∞–µ—Ç –æ –≤–∞—Å –≤—Å—ë. üëÅÔ∏è",
]

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
RATE_LIMIT = timedelta(minutes=30)
last_message_time: Optional[datetime] = None  # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è


async def track_new_users(update: Update, state_manager: StateManager) -> None:
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤,
    –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç –≤ state.json.
    """
    user = update.message.from_user
    user_id = str(user.id)
    user_name = f'<a href="tg://user?id={user_id}">{user.first_name}</a>'

    # –õ–æ–≥–∏—Ä—É–µ–º ID –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} ({user.first_name})")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if user_id not in state_manager.participants:
        state_manager.participants[user_id] = user_name
        await state_manager.save_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user_name}")

def get_rate_limit_remaining() -> Optional[timedelta]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è,
    –∏–ª–∏ None, –µ—Å–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–Ω—è—Ç–æ.
    """
    global last_message_time
    now = datetime.now()
    if last_message_time is None or now - last_message_time >= RATE_LIMIT:
        return None
    else:
        return RATE_LIMIT - (now - last_message_time)

def update_last_message_time() -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–µ.
    """
    global last_message_time
    last_message_time = datetime.now()

async def post_message(update: Update, context: ContextTypes.DEFAULT_TYPE,
                       state_manager: StateManager, message_manager: MessageManager,
                       category: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —à–∞–±–ª–æ–Ω.
    
    –õ–æ–≥–∏–∫–∞:
    - –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
    - –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ —Å –ø–æ–º–æ—â—å—é random.sample –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    - –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (pop(0)), –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
    - –°–æ—Å—Ç–æ—è–Ω–∏–µ (–æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π) —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    try:
        participant, participant_id = state_manager.get_random_participant()
        if not participant:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        message_list = state_manager.shuffled_messages.get(category, [])
        if not message_list:
            original_messages = message_manager.categories.get(category, [])
            if not original_messages:
                await update.message.reply_text(f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'!")
                return
            state_manager.shuffled_messages[category] = random.sample(original_messages, len(original_messages))
            message_list = state_manager.shuffled_messages[category]

        message = message_list.pop(0).replace("{name}", participant)
        await state_manager.save_state()
        await context.bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="HTML")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def post_any(update: Update, context: ContextTypes.DEFAULT_TYPE,
                   state_manager: StateManager, message_manager: MessageManager) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    try:
        if not message_manager.categories:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π!")
            return
        category = random.choice(list(message_manager.categories.keys()))
        await post_message(update, context, state_manager, message_manager, category)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE,
                       message_manager: MessageManager) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    """
    try:
        commands = "/post - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        for category in message_manager.categories:
            commands += f"/post_{category} - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'\n"
        commands += "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
        await update.message.reply_text(commands)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã help: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã help.")

def make_post_handler(category: str, state_manager: StateManager,
                      message_manager: MessageManager):
    """
    –§–∞–±—Ä–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    async def handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await post_message(update, context, state_manager, message_manager, category)
    return handler

async def post_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE,
                               state_manager: StateManager, message_manager: MessageManager) -> None:
    """
    –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ /post –∏ /post_<category>.
    –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Ä–æ–≤–Ω–æ /post, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è post_any (—Å–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è).
    –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç –≤–∏–¥ /post_<category>, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    –ü–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 1 –º–∏–Ω—É—Ç—É.
    –ï—Å–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç —É—Å—Ç–∞–ª, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏.
    """
    try:
        raw_command = update.message.text.strip().split()[0].lstrip('/')
        command = raw_command.split('@')[0]  # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        remaining = get_rate_limit_remaining()
        if remaining is not None:
            minutes = int(remaining.total_seconds() // 60)
            seconds = int(remaining.total_seconds() % 60)
            time_left = f"{minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥" if minutes else f"{seconds} —Å–µ–∫—É–Ω–¥"

            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å {minutes} –º–∏–Ω {seconds} —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.")

            tired_message = random.choice(TIRED_BOT_MESSAGES).format(time=time_left)

            await update.message.reply_text(tired_message)
  
            return

        # –ï—Å–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        update_last_message_time()

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {list(message_manager.categories.keys())}")

        if command == "post":
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            await post_any(update, context, state_manager, message_manager)
        elif command.startswith("post_"):
            category = command.replace("post_", "").lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            logger.info(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")

            if category in message_manager.categories:
                logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")
                await post_message(update, context, state_manager, message_manager, category)
            else:
                logger.warning(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ post_command_handler: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")


async def global_error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    """
    logger.exception("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:", exc_info=context.error)
    if update and hasattr(update, "message") and update.message:
        try:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:", exc_info=e)

